// Code generated by C:\Users\magch\go\bin\ldetool.exe .\extractor.lde --package handlers. DO NOT EDIT.

package handlers

import (
	"bytes"
)

var constLineLessScriptMoreRequireLazyLbrackLsbrckBslashTimeSliceImplBslashComma = []byte("<script>requireLazy([\"TimeSliceImpl\",")
var constLineLessSlashScriptMore = []byte("</script>")

// Line ...
type Line struct {
	Rest          []byte
	TimeSliceImpl struct {
		Valid bool
		Value []byte
	}
}

// Extract ...
func (p *Line) Extract(line []byte) (bool, error) {
	p.Rest = line
	var pos int
	var timeSliceImplRest []byte
	timeSliceImplRest = p.Rest

	// Checks if the rest starts with `"<script>requireLazy([\"TimeSliceImpl\","` and pass it
	if bytes.HasPrefix(timeSliceImplRest, constLineLessScriptMoreRequireLazyLbrackLsbrckBslashTimeSliceImplBslashComma) {
		timeSliceImplRest = timeSliceImplRest[len(constLineLessScriptMoreRequireLazyLbrackLsbrckBslashTimeSliceImplBslashComma):]
	} else {
		p.TimeSliceImpl.Valid = false
		goto lineTimeSliceImplLabel
	}

	// Take until "</script>" as Value(string)
	pos = bytes.Index(timeSliceImplRest, constLineLessSlashScriptMore)
	if pos >= 0 {
		p.TimeSliceImpl.Value = timeSliceImplRest[:pos]
		timeSliceImplRest = timeSliceImplRest[pos+len(constLineLessSlashScriptMore):]
	} else {
		p.TimeSliceImpl.Valid = false
		goto lineTimeSliceImplLabel
	}

	p.TimeSliceImpl.Valid = true
	p.Rest = timeSliceImplRest
lineTimeSliceImplLabel:

	return true, nil
}

// GetTimeSliceImplValue ...
func (p *Line) GetTimeSliceImplValue() (res []byte) {
	if p.TimeSliceImpl.Valid {
		res = p.TimeSliceImpl.Value
	}
	return
}
